name: "CI Build and Release"

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'website/**'
      - BUILD.md
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - latest.json
      - .gitignore
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'website/**'
      - BUILD.md
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - latest.json
      - .gitignore
  workflow_dispatch:

jobs:
  Ubuntu:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu
            os_version: 18.04
            qt_version: 5.9.5
            release_tag: linux
            cc: gcc-8
            cxx: g++-8
            arch: x64

    runs-on: ${{ matrix.config.os }}-${{ matrix.config.os_version }}
    steps:
      - uses: actions/checkout@v2

#Install build deps
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.qt_version }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.config.qt_version }}
          arch: ${{ matrix.config.qt_arch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install g++-8 ragel -y

      - uses: ./.github/actions/boost-env
      - name: Restore Boost cache
        uses: actions/cache@v2
        id: cache-boost
        with:
          path: ${{env.BOOST_ROOT}}
          key: ${{env.BOOST_URL}}
      - uses: ./.github/actions/boost-download
        if: steps.cache-boost.outputs.cache-hit != 'true'

#Build and test
      - uses: ./.github/actions/klogg-version
      - uses: ./.github/actions/prepare-workspace-env
      - uses: ./.github/actions/build-and-test

#Package
      - name: Linux package 
        run: |
          cd $KLOGG_BUILD_ROOT
          cpack --verbose -G "DEB"
          cp ./output/klogg.sym ./packages/klogg_deb.sym
      
      - name: Check deb package
        run: |
          docker run --rm -v "$(pwd)/$KLOGG_BUILD_ROOT/packages":/usr/local ubuntu:bionic /bin/bash -c "apt-get update && apt install --dry-run /usr/local/klogg*.deb"
      
      - name: Linux AppImage 
        run: |
          cd $KLOGG_BUILD_ROOT
          DESTDIR=$(readlink -f appdir) ninja install
          wget -c -q "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          VERSION=$KLOGG_VERSION ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -qmake=$Qt5_Dir/bin/qmake -bundle-non-qt-libs
          VERSION=$KLOGG_VERSION ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -appimage
          cp ./klogg-$KLOGG_VERSION-x86_64.AppImage ./packages/klogg-$KLOGG_VERSION-x86_64.AppImage

# Final upload of all packages
      - uses: actions/upload-artifact@v2
        with:
          name: packages-deb-${{ matrix.config.arch }}
          path: '${{ env.KLOGG_BUILD_ROOT }}/packages/*' 

  Centos:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: centos
            os_version: 8
            release_tag: linux
            cc: gcc-8
            cxx: g++-8
            arch: x64
            container: variar/klogg_centos8

    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      
      - name: Build container 
        run: |
          cd docker/centos8
          docker build -t ${{ matrix.config.container }} .

      - uses: ./.github/actions/boost-env
      - name: Restore Boost cache
        uses: actions/cache@v2
        id: cache-boost
        with:
          path: ${{env.BOOST_ROOT}}
          key: ${{env.BOOST_URL}}
      - uses: ./.github/actions/boost-download
        if: steps.cache-boost.outputs.cache-hit != 'true'

      - uses: ./.github/actions/klogg-version
      - uses: ./.github/actions/prepare-workspace-env
      - uses: ./.github/actions/docker-build

      - name: package 
        run: |
          docker run -v "$KLOGG_WORKSPACE":/usr/local ${{ matrix.config.container }} /bin/bash -c "cd /usr/local/build_root && cpack -G RPM"
          docker run -v "$KLOGG_WORKSPACE":/usr/local ${{ matrix.config.container }} /bin/bash -c "cd /usr/local/build_root && cp ./output/klogg.sym ./packages/klogg_rpm.sym"

      - name: Check rpm package
        run: |
          docker run --rm -v "$KLOGG_WORKSPACE/$KLOGG_BUILD_ROOT/packages":/usr/local centos:8 /bin/bash -c "yum install -y --setopt tsflags=test /usr/local/klogg*.rpm"
    
# Final upload of all packages
      - uses: actions/upload-artifact@v2
        with:
          name: packages-rpm-${{ matrix.config.arch }}
          path: '${{ env.KLOGG_BUILD_ROOT }}/packages/*'       

  Mac:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: macos
            os_version: latest
            qt_version: 5.15.2
            release_tag: macos
            cc: clang
            cxx: clang++
            arch: x64

    runs-on: ${{ matrix.config.os }}-${{ matrix.config.os_version }}
    steps:
      - uses: actions/checkout@v2

#Install build deps
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.qt_version }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.config.qt_version }}
          arch: ${{ matrix.config.qt_arch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Set brew env
        run: |
          echo "HOMEBREW_NO_ANALYTICS=1" >> $GITHUB_ENV
          echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $GITHUB_ENV
          echo "HOMEBREW_NO_INSTALL_CLEANUP=1" >> $GITHUB_ENV

      - name: Brew deps
        run: |
          brew install ragel
      
      - uses: ./.github/actions/boost-env
      - name: Restore Boost cache
        uses: actions/cache@v2
        id: cache-boost
        with:
          path: ${{env.BOOST_ROOT}}
          key: ${{env.BOOST_URL}}
      - uses: ./.github/actions/boost-download
        if: steps.cache-boost.outputs.cache-hit != 'true'

#Build and test
      - uses: ./.github/actions/klogg-version
      - uses: ./.github/actions/prepare-workspace-env
      - uses: ./.github/actions/build-and-test

#Package
      - name: Mac prepare codesign
        if: ${{ github.event_name != 'pull_request' }} 
        uses: apple-actions/import-codesign-certs@v1
        with: 
          p12-file-base64: ${{ secrets.CODESIGN_BASE64 }}
          p12-password: ${{ secrets.CODESIGN_PASSWORD }}

      - name: Mac deploy Qt
        run: |
          cd $KLOGG_BUILD_ROOT
          macdeployqt ./output/klogg.app -always-overwrite -verbose=2
          $KLOGG_WORKSPACE/3rdparty/macdeployqtfix/macdeployqtfix.py ./output/klogg.app/Contents/MacOS/klogg $Qt5_Dir
      
      - name: Mac codesign binaries
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd $KLOGG_BUILD_ROOT
          codesign -v -f -o runtime --deep --timestamp -s "Developer ID Application: Anton Filimonov (GAW773U324)" ./output/klogg.app;
      
      - name: Mac pack dmg
        run: |
          cd $KLOGG_BUILD_ROOT
          cpack --verbose -G "DragNDrop"

      - name: Mac codesign dmg
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd $KLOGG_BUILD_ROOT
          codesign -v -f -o runtime --timestamp -s "Developer ID Application: Anton Filimonov (GAW773U324)" ./packages/*
          
      - name: "Mac notarize"
        if: ${{ github.event_name != 'pull_request' }} 
        uses: variar/xcode-notarize@v1.0.3
        with:
          product-path: "${{ env.KLOGG_BUILD_ROOT }}/packages/klogg-${{ env.KLOGG_VERSION }}-OSX.dmg"
          primary-bundle-id: "dev.filimonov.klogg"
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      - name: "Mac staple"
        if: ${{ github.event_name != 'pull_request' }} 
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: "${{ env.KLOGG_BUILD_ROOT }}/packages/klogg-${{ env.KLOGG_VERSION }}-OSX.dmg"

      - name: Mac symbols
        run: |
          cd $KLOGG_BUILD_ROOT
          cp -a ./output/klogg.dSym ./packages/
          cp -a ./output/klogg.app ./packages/

# Final upload of all packages
      - uses: actions/upload-artifact@v2
        with:
          name: packages-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: '${{ env.KLOGG_BUILD_ROOT }}/packages/*' 

  Windows:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: windows
            os_version: latest
            qt_version: 5.15.2
            release_tag: windows
            cc: cl
            cxx: cl
            arch: x64
            ssl_arch: -x64

          - os: windows
            os_version: latest
            qt_version: 5.15.2
            release_tag: windows
            cc: cl
            cxx: cl
            arch: x86
            qt_arch: win32_msvc2019

    runs-on: ${{ matrix.config.os }}-${{ matrix.config.os_version }}
    steps:
      - uses: actions/checkout@v2

#Install build deps
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.qt_version }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.config.qt_version }}
          arch: ${{ matrix.config.qt_arch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Cache openssl
        id: cache-openssl
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}\openssl-1.1
          key: OpensslCache-1-1-1l

      - name: Download openssl
        if: ${{ steps.cache-openssl.outputs.cache-hit != 'true' }} 
        run: |
          Invoke-WebRequest -Uri "https://mirror.firedaemon.com/OpenSSL/openssl-1.1.1l-dev.zip" -OutFile openssl.zip
          7z x openssl.zip 

      - name: Set openssl paths
        shell: sh
        run: |
          echo "SSL_DIR=${{ github.workspace }}\openssl-1.1\${{ matrix.config.arch }}\bin" >> $GITHUB_ENV
          echo "SSL_ARCH=${{ matrix.config.ssl_arch }}" >> $GITHUB_ENV 

      - uses: ./.github/actions/boost-env
      - name: Restore Boost cache
        uses: actions/cache@v2
        id: cache-boost
        with:
          path: ${{env.BOOST_ROOT}}
          key: ${{env.BOOST_URL}}
      - uses: ./.github/actions/boost-download
        if: steps.cache-boost.outputs.cache-hit != 'true'
     
#Build and test
      - name: Prepare dev cmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.config.arch }}

      - uses: ./.github/actions/klogg-version
      - uses: ./.github/actions/prepare-workspace-env
      - uses: ./.github/actions/build-and-test

#Package
      - name: Win codesign executables
        if: ${{ github.event_name != 'pull_request' }}
        uses: apptim/code-sign-action@v8
        with:
          certificate: '${{ secrets.MS_CODESIGN_BASE64 }}'
          password: '${{ secrets.MS_CODESIGN_PASSWORD }}'
          certificatesha1: '${{ secrets.MS_CODESIGN_HASH }}'
          folder: '${{ env.KLOGG_BUILD_ROOT }}\output'
          recursive: true

      - name: Win portable
        shell: cmd
        run: |
          packaging\windows\prepare_release.cmd

      - name: Win installer
        uses: joncloud/makensis-action@v3.3
        with:
          script-file: klogg.nsi
          arguments: "-DVERSION=%KLOGG_VERSION% -DPLATFORM=%KLOGG_ARCH%"

      - name: Win package
        shell: cmd
        run: |
          md %KLOGG_BUILD_ROOT%\packages
          xcopy klogg-%KLOGG_VERSION%-%KLOGG_ARCH%-portable.zip %KLOGG_BUILD_ROOT%\packages\ /y
          xcopy klogg-%KLOGG_VERSION%-%KLOGG_ARCH%-pdb.zip %KLOGG_BUILD_ROOT%\packages\ /y
          xcopy klogg-%KLOGG_VERSION%-%KLOGG_ARCH%-setup.exe %KLOGG_BUILD_ROOT%\packages\ /y

      - name: Win codesign installer
        if: ${{ github.event_name != 'pull_request' }}
        uses: apptim/code-sign-action@v8
        with:
          certificate: '${{ secrets.MS_CODESIGN_BASE64 }}'
          password: '${{ secrets.MS_CODESIGN_PASSWORD }}'
          certificatesha1: '${{ secrets.MS_CODESIGN_HASH }}'
          folder: '${{ env.KLOGG_BUILD_ROOT }}\packages'
          recursive: true 
      
# Final upload of all packages
      - uses: actions/upload-artifact@v2
        with:
          name: packages-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: '${{ env.KLOGG_BUILD_ROOT }}/packages/*'      

  release:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.event.head_commit.message, '[ci release]')) }}
    runs-on: ubuntu-latest
    needs: [Ubuntu, Centos, Mac, Windows] 
    steps:
    - uses: actions/checkout@v2

    - uses: ./.github/actions/klogg-version

    - uses: actions/download-artifact@v2

    - name: Display structure of downloaded files
      run: ls -R

    - name: Release win
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: ${{ secrets.KLOGG_GITHUB_TOKEN }}
        automatic_release_tag: continuous-win
        prerelease: true
        files: |
          ./packages-windows-x64/*
          ./packages-windows-x86/*

    - name: Release linux
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: ${{ secrets.KLOGG_GITHUB_TOKEN }}
        automatic_release_tag: continuous-linux
        prerelease: true
        files: |
          ./packages-deb-x64/*
          ./packages-rpm-x64/*

    - name: Release mac
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: ${{ secrets.KLOGG_GITHUB_TOKEN }}
        automatic_release_tag: continuous-osx
        prerelease: true
        files: ./packages-macos-x64/*

    - name: Setup Sentry CLI
      uses: mathrix-education/setup-sentry-cli@0.1.0
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      with:
        token: ${{ secrets.SENTRY_TOKEN }}
        organization: anton-filimonov
        project: klogg

    - name: Create Sentry release
      shell: sh
      run: |
        sentry-cli releases new $KLOGG_VERSION
        sentry-cli releases set-commits --auto $KLOGG_VERSION

    - name: Upload symbols linux
      shell: sh
      run: |
        sentry-cli upload-dif ./packages-deb-x64/klogg_deb.sym 
        sentry-cli upload-dif ./packages-rpm-x64/klogg_rpm.sym 

    - name: Upload symbols mac
      shell: sh
      run: |
        sentry-cli upload-dif ./packages-macos-x64/klogg.app/Contents/MacOS/klogg ./packages-macos-x64/klogg.dSym

    - name: Upload symbols win x64
      shell: sh
      run: |
        sentry-cli upload-dif ./packages-windows-x64/klogg-$KLOGG_VERSION-x64-pdb.zip

    - name: Upload symbols win x86
      shell: sh
      run: |
        sentry-cli upload-dif ./packages-windows-x86/klogg-$KLOGG_VERSION-x86-pdb.zip 


